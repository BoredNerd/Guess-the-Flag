# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'game_flag.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QCursor, QPixmap
from PyQt5.QtCore import Qt, QPoint
import os
import random
import sys
from playsound import playsound

class Ui_MainWindow(object):
    def mousePress(self, event):
        MainWindow.dragPos = MainWindow.pos()
        self.mouse_original_pos = MainWindow.mapToGlobal(event.pos())

    def moveWindow(self, event):
        if event.buttons() == Qt.LeftButton:
            MainWindow_last_pos = MainWindow.dragPos + MainWindow.mapToGlobal(event.pos()) - self.mouse_original_pos
            MainWindow.move(MainWindow_last_pos)
            event.accept()

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(889, 680)
        MainWindow.setStyleSheet("background-color : #161219;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.header = QtWidgets.QFrame(self.centralwidget)
        self.header.setGeometry(QtCore.QRect(0, 0, 889, 31))
        self.header.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.header.setObjectName("header")
        self.header.mouseMoveEvent = self.moveWindow
        self.header.mousePressEvent = self.mousePress
        self.header.setCursor(QCursor(QtCore.Qt.SizeAllCursor))

        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(40, 360, 801, 311))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_2.setContentsMargins(37, 0, 7, 0)
        self.gridLayout_2.setHorizontalSpacing(46)
        self.gridLayout_2.setVerticalSpacing(7)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.pushButton_1 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.pushButton_1.setEnabled(True)
        self.pushButton_1.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_1.setMinimumSize(QtCore.QSize(355, 111))
        self.pushButton_1.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_1.setStyleSheet("QPushButton{\n"
                                        "    border: 4px  groove #BC006C;\n"
                                        "    border-radius: 20px;\n"
                                        "    color:white;\n"
                                        "    font: 20pt \"Lexend SemiBold\";\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    background-color : #800048;\n"
                                        "    \n"
                                        "}\n"
                                        "")
        self.pushButton_1.setObjectName("pushButton_1")
        self.gridLayout_2.addWidget(self.pushButton_1, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.pushButton_2.setEnabled(True)
        self.pushButton_2.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setMinimumSize(QtCore.QSize(355, 111))
        self.pushButton_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "    border: 4px  groove #BC006C;\n"
                                        "    border-radius: 20px;\n"
                                        "    color:white;\n"
                                        "    font: 20pt \"Lexend SemiBold\";\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    background-color : #800048;\n"
                                        "    \n"
                                        "}\n"
                                        "")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_2.addWidget(self.pushButton_2, 0, 1, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.pushButton_3.setEnabled(True)
        self.pushButton_3.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setMinimumSize(QtCore.QSize(355, 111))
        self.pushButton_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_3.setStyleSheet("QPushButton{\n"
                                        "    border: 4px  groove #BC006C;\n"
                                        "    border-radius: 20px;\n"
                                        "    color:white;\n"
                                        "    font: 20pt \"Lexend SemiBold\";\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    background-color : #800048;\n"
                                        "    \n"
                                        "}\n"
                                        "")
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_2.addWidget(self.pushButton_3, 1, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.pushButton_4.setEnabled(True)
        self.pushButton_4.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setMinimumSize(QtCore.QSize(355, 111))
        self.pushButton_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_4.setStyleSheet("QPushButton{\n"
                                        "    border: 4px  groove #BC006C;\n"
                                        "    border-radius: 20px;\n"
                                        "    color:white;\n"
                                        "    font: 20pt \"Lexend SemiBold\";\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    background-color : #800048;\n"
                                        "    \n"
                                        "}\n"
                                        "")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_2.addWidget(self.pushButton_4, 1, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(180, 40, 541, 311))
        self.label.setObjectName("label")
        self.exit = QtWidgets.QLabel(self.centralwidget)
        self.exit.setGeometry(QtCore.QRect(580, -120, 200, 200))
        exit_nothover = QPixmap("./image/icon/exit.png")
        exit_hover = QPixmap("./image/icon/exit_hover.png")
        self.exit.setPixmap(exit_nothover)
        self.exit.setAlignment(QtCore.Qt.AlignCenter)
        self.exit.setGeometry(850,20,15,34 )
        self.exit.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.exit.leaveEvent = lambda e: self.exit.setPixmap(exit_nothover)
        self.exit.enterEvent = lambda e: self.exit.setPixmap(exit_hover)
        self.exit.mousePressEvent = self.prova
        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        MainWindow.setCentralWidget(self.centralwidget)
        self.randomflag()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def prova(self, *arg, **kwargs):
        sys.exit()
    def randomflag(self):  # set the flag on the label
        self.flagfile = random.choice(range(len(os.listdir("./image/flags/"))))   # choose a flag from the  folder flagcode
        self.label.setStyleSheet( f"image : url(image/flags/{os.listdir('./image/flags/')[self.flagfile]})")  # set the chosen flag on the label
        self.randomnumber = random.randint(1,4)  # the name of the country of the flag will be stored inside a random button, if randomnumber = 1 then it will be stored in the first button, if 2 in the second button and so on..
        self.retranslateUi()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle("Country Game")
        list_flag = self.generateotherflag()  # generate other country name and return a list containg 3 different index
        if self.randomnumber == 1:  # set the country name of the flag on the button number 1
            self.pushButton_1.setText(os.listdir('./image/flags/')[self.flagfile].replace(".svg", ""))  # set name of the right country
            self.pushButton_1.clicked.connect(lambda:self.disconnectbutton("1", False) if (self.randomnumber == 1) else None)  # if button clicked, calls function randomflag - which basically it replaces the flag of the label to another flag and changes button's text

            self.pushButton_2.setText(os.listdir('./image/flags/')[list_flag[0]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_2.clicked.connect(lambda: self.disconnectbutton("2", True) if (self.randomnumber == 1) else None)

            self.pushButton_3.setText(os.listdir('./image/flags/')[list_flag[1]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_3.clicked.connect(lambda: self.disconnectbutton("3", True) if (self.randomnumber == 1) else None)

            self.pushButton_4.setText(os.listdir('./image/flags/')[list_flag[2]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_4.clicked.connect(lambda: self.disconnectbutton("4", True) if (self.randomnumber == 1) else None)

        elif self.randomnumber == 2:  # set the country name of the flag on the button number 2
            self.pushButton_1.setText(os.listdir('./image/flags/')[list_flag[0]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_1.clicked.connect(lambda: self.disconnectbutton("1", True) if (self.randomnumber == 2) else None )

            self.pushButton_2.setText(os.listdir('./image/flags/')[self.flagfile].replace(".svg", ""))  # set name of the right country
            self.pushButton_2.clicked.connect(lambda:  self.disconnectbutton("2", False) if (self.randomnumber == 2) else None )  # if button clicked, calls function randomflag - which basically it replaces the flag of the label to another flag and changes button's text

            self.pushButton_3.setText(os.listdir('./image/flags/')[list_flag[1]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_3.clicked.connect(lambda: self.disconnectbutton("3", True) if (self.randomnumber == 2) else None )

            self.pushButton_4.setText(os.listdir('./image/flags/')[list_flag[2]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_4.clicked.connect(lambda: self.disconnectbutton("4", True) if (self.randomnumber == 2) else None )
        elif self.randomnumber == 3:  # set the country name of the flag on the button number 3
            self.pushButton_1.setText(os.listdir('./image/flags/')[list_flag[0]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_1.clicked.connect(lambda: self.disconnectbutton("1", True) if (self.randomnumber == 3) else None )

            self.pushButton_2.setText(os.listdir('./image/flags/')[list_flag[1]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_2.clicked.connect(lambda: self.disconnectbutton("2", True) if (self.randomnumber == 3) else None )

            self.pushButton_3.setText(os.listdir('./image/flags/')[self.flagfile].replace(".svg", ""))  # set name of the right country
            self.pushButton_3.clicked.connect(lambda: self.disconnectbutton("3", False) if (self.randomnumber == 3) else None)  # if button clicked, calls function randomflag - which basically it replaces the flag of the label to another flag and changes button's text

            self.pushButton_4.setText(os.listdir('./image/flags/')[list_flag[2]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_4.clicked.connect(lambda: self.disconnectbutton("4", True) if (self.randomnumber == 3) else None)

        else:  # set the country name of the flag on the button number 4
            self.pushButton_1.setText(os.listdir('./image/flags/')[list_flag[0]].replace(".svg", "") )  # set name of the wrong country
            self.pushButton_1.clicked.connect(lambda: self.disconnectbutton("1", True) if (self.randomnumber == 4) else None)

            self.pushButton_2.setText(os.listdir('./image/flags/')[list_flag[1]].replace(".svg", "") )  # set name of the wrong country
            self.pushButton_2.clicked.connect(lambda: self.disconnectbutton("2", True) if (self.randomnumber == 4) else None)

            self.pushButton_3.setText(os.listdir('./image/flags/')[list_flag[2]].replace(".svg", ""))  # set name of the wrong country
            self.pushButton_3.clicked.connect(lambda: self.disconnectbutton("3", True) if (self.randomnumber == 4) else None)

            self.pushButton_4.setText(os.listdir('./image/flags/')[self.flagfile].replace(".svg", "")) # set name of the right country
            self.pushButton_4.clicked.connect(lambda: self.disconnectbutton("4", False) if (self.randomnumber == 4) else None)  # if button clicked, calls function randomflag - which basically it replaces the flag of the label to another flag and changes button's text

    def disconnectbutton(self, number, audio):
        if audio:
            if random.randint(1,2) == 1:
                playsound("./Sound/Wrong_Answer/bruh_sound.wav", block=False)
            else:
                playsound("./Sound/Wrong_Answer/nope_sound.wav", block=False)
        else:
            if random.randint(1, 2) == 1:
                playsound("./Sound/Right_Answer/noice_sound.wav", block=False)
            else:
                playsound("./Sound/Right_Answer/yeay_sound.wav", block=False)
        if number == "1":
            self.pushButton_1.disconnect()
        elif number == "2":
            self.pushButton_2.disconnect()
        elif number == "3":
            self.pushButton_3.disconnect()
        else:
            self.pushButton_4.disconnect()
        self.randomflag()
    def generateotherflag(self):
        list_flag = []  # empty list
        for i in range(3):
            x = random.choice(list(range(0, self.flagfile)) + list(range(self.flagfile + 1, 263)))  # choose country name except the country name of the label
            if x not in list_flag:
                list_flag.append(x)
            else:  # if x is already in list, there will be a while true loop to generate a number that is not present in the list, therefore the button will not have the same name country
                while True:
                    x = random.choice(list(range(0, self.flagfile)) + list(range(self.flagfile + 1, 263)))
                    if x not in list_flag:
                        list_flag.append(x)
                        break
        return list_flag  # return a list containg 3 different random number and also they are not equal to index of country flag of the label


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    app.exec_()

